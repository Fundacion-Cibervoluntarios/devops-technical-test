# ðŸŽ“ Service Account con Azure Workload Identity
# Permite a los pods acceder a recursos de Azure de forma segura

---
# Service Account principal
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecommerce-app-sa
  namespace: ecommerce-app
  labels:
    app: ecommerce
    app.kubernetes.io/name: ecommerce
    app.kubernetes.io/component: serviceaccount
    app.kubernetes.io/instance: ecommerce-app
    app.kubernetes.io/managed-by: kubectl
    azure.workload.identity/use: "true"
  annotations:
    # ðŸŽ“ Azure Workload Identity annotations
    # CLIENT_ID se inyecta desde CI/CD o Terraform output
    azure.workload.identity/client-id: "${AZURE_CLIENT_ID}"
    azure.workload.identity/tenant-id: "${AZURE_TENANT_ID}"
    
    # DescripciÃ³n
    description: "Service account for e-commerce application with Azure Workload Identity"
    
automountServiceAccountToken: true

---
# ðŸŽ“ ClusterRole para el Service Account
# Define permisos a nivel de cluster (si es necesario)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ecommerce-app-cluster-role
  labels:
    app: ecommerce
    app.kubernetes.io/name: ecommerce
rules:
  # Permisos para leer ConfigMaps y Secrets
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch"]
    
  # Permisos para leer Services y Endpoints (para service discovery)
  - apiGroups: [""]
    resources: ["services", "endpoints"]
    verbs: ["get", "list"]
    
  # Permisos para leer Pods (para health checks)
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
    
  # Permisos para Horizontal Pod Autoscaler
  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["get", "list"]
    
  # Permisos para mÃ©tricas
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list"]

---
# ðŸŽ“ ClusterRoleBinding
# Asocia el ClusterRole con el ServiceAccount
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ecommerce-app-cluster-role-binding
  labels:
    app: ecommerce
    app.kubernetes.io/name: ecommerce
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ecommerce-app-cluster-role
subjects:
  - kind: ServiceAccount
    name: ecommerce-app-sa
    namespace: ecommerce-app

---
# ðŸŽ“ Role para permisos especÃ­ficos del namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ecommerce-app-role
  namespace: ecommerce-app
  labels:
    app: ecommerce
    app.kubernetes.io/name: ecommerce
rules:
  # Permisos completos sobre ConfigMaps y Secrets en el namespace
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
    
  # Permisos para PersistentVolumeClaims
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
    
  # Permisos para Pods (necesario para kubectl exec/logs)
  - apiGroups: [""]
    resources: ["pods", "pods/log", "pods/exec"]
    verbs: ["get", "list", "watch"]
    
  # Permisos para Events
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch"]

---
# ðŸŽ“ RoleBinding
# Asocia el Role con el ServiceAccount en el namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ecommerce-app-role-binding
  namespace: ecommerce-app
  labels:
    app: ecommerce
    app.kubernetes.io/name: ecommerce
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ecommerce-app-role
subjects:
  - kind: ServiceAccount
    name: ecommerce-app-sa
    namespace: ecommerce-app

---
# ðŸŽ“ Service Account para Jobs y CronJobs (si es necesario)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecommerce-jobs-sa
  namespace: ecommerce-app
  labels:
    app: ecommerce
    app.kubernetes.io/name: ecommerce
    app.kubernetes.io/component: jobs
automountServiceAccountToken: true