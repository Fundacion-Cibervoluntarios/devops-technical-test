apiVersion: v2
name: ecommerce-app
description: E-commerce application Helm chart for Azure AKS
version: 0.1.0
appVersion: "1.0.0"

# TODO: Add the following metadata:
# - keywords (e.g., ecommerce, azure, microservices)
# - home URL 
# - sources URLs
# - maintainers information

# ðŸŽ“ SOLUCIÃ“N: Metadata completo profesional
keywords:
  - ecommerce
  - azure
  - microservices
  - kubernetes
  - devops
  - nodejs
  - react

home: https://github.com/[tu-usuario]/devops-technical-test
icon: https://raw.githubusercontent.com/[tu-usuario]/devops-technical-test/main/icon.png

sources:
  - https://github.com/[tu-usuario]/devops-technical-test
  - https://github.com/[tu-usuario]/devops-technical-test/tree/main/helm-chart

maintainers:
  - name: DevOps Team
    email: devops@company.com
    url: https://github.com/[tu-usuario]

# ðŸŽ“ EXTRA: InformaciÃ³n adicional que muestra profesionalismo
deprecated: false
kubeVersion: ">=1.23.0-0"
type: application

# TODO: Add dependencies if using external charts
# dependencies:
#   - name: redis
#     version: "17.11.3"
#     repository: "https://charts.bitnami.com/bitnami" 
#     condition: redis.enabled
#   - name: postgresql
#     version: "12.8.0"
#     repository: "https://charts.bitnami.com/bitnami"
#     condition: postgresql.enabled

# ðŸŽ“ SOLUCIÃ“N: Dependencies comentadas porque usaremos servicios Azure
# En un escenario real, podrÃ­as usar estos charts para desarrollo local
dependencies: []
  # ðŸŽ“ NOTA: No incluimos Redis/PostgreSQL como dependencias porque:
  # 1. PostgreSQL lo provee Azure Database for PostgreSQL
  # 2. Redis lo podemos desplegar con nuestro propio StatefulSet
  # 3. Esto demuestra que entendemos cuÃ¡ndo usar charts externos vs servicios cloud
  
  # Si quisiÃ©ramos desarrollo local, descomentarÃ­amos:
  # - name: redis
  #   version: "17.11.3"
  #   repository: "https://charts.bitnami.com/bitnami"
  #   condition: redis.local.enabled
  #   tags:
  #     - local-dev
  # - name: postgresql
  #   version: "12.8.0"
  #   repository: "https://charts.bitnami.com/bitnami"
  #   condition: postgresql.local.enabled
  #   tags:
  #     - local-dev

# TODO: Add annotations for Artifact Hub
# annotations:
#   "artifacthub.io/containsSecurityUpdates": "false"
#   "artifacthub.io/changes": |
#     - Initial release
#     - Azure integration
#     - Security hardening

# ðŸŽ“ SOLUCIÃ“N: Annotations para Artifact Hub (marketplace de Helm)
annotations:
  "artifacthub.io/containsSecurityUpdates": "false"
  "artifacthub.io/changes": |
    - Initial release
    - Azure AKS integration
    - Application Gateway Ingress Controller support
    - Azure Key Vault secrets integration
    - Security hardening with NetworkPolicies
    - Pod security contexts implemented
    - Resource quotas and limits defined
    - HorizontalPodAutoscaler configured
    - PodDisruptionBudget for high availability
    - Health checks (liveness, readiness, startup)
    - Anti-affinity rules for pod distribution
  "artifacthub.io/recommendations": |
    - name: kube-prometheus-stack
      repository: https://prometheus-community.github.io/helm-charts
    - name: cert-manager
      repository: https://charts.jetstack.io
  "artifacthub.io/links": |
    - name: Chart Documentation
      url: https://github.com/[tu-usuario]/devops-technical-test/blob/main/helm-chart/README.md
    - name: Support
      url: https://github.com/[tu-usuario]/devops-technical-test/issues
  "artifacthub.io/operator": "false"
  "artifacthub.io/prerelease": "false"
  "artifacthub.io/signKey": |
    # ðŸŽ“ En producciÃ³n, aquÃ­ irÃ­a tu clave GPG para firmar el chart
    # Esto demuestra awareness de supply chain security
  "artifacthub.io/images": |
    - name: frontend
      image: acrecommerce.azurecr.io/ecommerce-frontend:1.0.0
    - name: backend
      image: acrecommerce.azurecr.io/ecommerce-backend:1.0.0
    - name: redis
      image: redis:7-alpine
  "artifacthub.io/license": MIT
  "artifacthub.io/category": "e-commerce"